
package com.sap.xi.edi.supplier;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import com.sap.xi.edi.BusinessDocumentMessageHeader;
import com.sap.xi.edi.SalesOrder;
import com.sap.xi.edi.SalesOrderMessage;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.xml.namespace.QName;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.wsdl.Port;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.ws.Dispatch;
import javax.xml.ws.Endpoint;
import javax.xml.ws.handler.MessageContext;
import org.apache.cxf.Bus;
import org.apache.cxf.configuration.security.AuthorizationPolicy;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.ws.policy.PolicyInterceptorProviderRegistry;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.wss4j.dom.WSConstants;
import org.apache.wss4j.dom.handler.WSHandlerConstants;

/**
 * This class was generated by Apache CXF 3.3.3
 * 2019-09-25T13:01:20.767+05:30
 * Generated source version: 3.3.3
 *
 */
public final class OrderRequestIn_BindingSoap12_Client {

    private static final QName SERVICE_NAME = new QName("http://sap.com/xi/EDI/Supplier", "service");

    private OrderRequestIn_BindingSoap12_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = Service.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) {
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
        System.out.println(Service.class.getResource("../../../../../ORDERREQUEST_IN.wsdl"));
        Service ss = new Service(Service.class.getResource("../../../../../ORDERREQUEST_IN.wsdl"), SERVICE_NAME);
        //Dispatch<OrderRequestIn> disp = ss.createDispatch(SERVICE_NAME, OrderRequestIn.class, Service.Mode.PAYLOAD);
 

        
        
        
        OrderRequestIn port = ss.getBindingSoap12();
//        OrderRequestIn por;
//        por = ss.getPort(OrderRequestIn.class);
//        org.apache.cxf.endpoint.Client client = org.apache.cxf.frontend.ClientProxy.getClient(por);
// org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();
// 
// 
// Bus bus = client.getBus();
// PolicyInterceptorProviderRegistry reg = bus.getExtension(PolicyInterceptorProviderRegistry.class);
// Set  set = new HashSet<>();
// set.add(new QName("http://schemas.xmlsoap.org/ws/2005/07/securitypolicy", "IncludeTimestamp") );
// set.add(new QName("http://schemas.xmlsoap.org/ws/2005/07/securitypolicy", "TransportBinding"));
// reg.register(new org.apache.cxf.ws.policy.IgnorablePolicyInterceptorProvider(set));
// 
//        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();

//factory.getInInterceptors().add(new LoggingInInterceptor());
//factory.getOutInterceptors().add(new LoggingOutInterceptor());
//
//factory.setServiceClass(OrderRequestIn.class);
//factory.setWsdlLocation(Service.class.getResource("../../../../../ORDERREQUEST_IN.wsdl").getFile());
//factory.setServiceName(SERVICE_NAME);
//
//factory.setAddress("https://my302314-api.s4hana.ondemand.com/sap/bc/srt/scs_ext/sap/orderrequest_in?sap-client=100"); 
//
//OrderRequestIn info = (OrderRequestIn) factory.create();
//
//org.apache.cxf.endpoint.Client client1 = ClientProxy.getClient(info);
//HTTPConduit http = (HTTPConduit) client1.getConduit();
//http.getAuthorization().setUserName("BHF_COMM");
//http.getAuthorization().setPassword("nBhLsiwWXmfwqmX)FDLRUA6SwdCitAXUswwZwLqX");


        {
            
//AuthorizationPolicy apo=conduit.getAuthorization();
//apo.setUserName("BHF_COMM");
//apo.setPassword("nBhLsiwWXmfwqmX)FDLRUA6SwdCitAXUswwZwLqX");
//System.out.println(apo);
//conduit.setAuthorization(apo);
//endpoint.getOutInterceptors().add(new WSS4JOutInterceptor());
        System.out.println("Invoking orderRequestIn...");
        com.sap.xi.edi.SalesOrderMessage _orderRequestIn_orderRequest = new SalesOrderMessage();
        _orderRequestIn_orderRequest.setMessageHeader(new BusinessDocumentMessageHeader());
        _orderRequestIn_orderRequest.setOrder(new SalesOrder());
//        try{info.orderRequestIn(_orderRequestIn_orderRequest);}catch(Exception e){e.printStackTrace();}
        //por.orderRequestIn(_orderRequestIn_orderRequest);
        
        
        // Set request context property.
java.util.Map<String, Object> requestContext =
  ((javax.xml.ws.BindingProvider)port).getRequestContext();
Map http_headers = new HashMap();
        ArrayList authList = new ArrayList();
        authList.add("Basic QkhGX0NPTU06bkJoTHNpd1dYbWZ3cW1YKUZETFJVQTZTd2RDaXRBWFVzd3dad0xxWA==");
        http_headers.put("Authorization", authList);
requestContext.put(MessageContext.HTTP_REQUEST_HEADERS, http_headers);
        //port.orderRequestIn(_orderRequestIn_orderRequest);
//Source request = new StreamSource(_orderRequestIn_orderRequest);
//Source response = disp.invoke(request);


        
         JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean(); 
    factory.setServiceClass(OrderRequestIn.class); 
    factory.setAddress("https://my302314-api.s4hana.ondemand.com/sap/bc/srt/scs_ext/sap/orderrequest_in"); 
    OrderRequestIn portl = (OrderRequestIn) factory.create();

    org.apache.cxf.endpoint.Client client = ClientProxy.getClient(portl);
    HTTPConduit http = (HTTPConduit) client.getConduit();

    http.getAuthorization().setUserName("BHF_COMM");
    http.getAuthorization().setPassword("nBhLsiwWXmfwqmX)FDLRUA6SwdCitAXUswwZwLqX");


    org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();

    Map<String,Object> outProps = new HashMap<String,Object>();
System.out.println("--ClientPasswordCallback.class.getName()--"+ClientPasswordCallback.class.getName());
    outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN);
    outProps.put(WSHandlerConstants.USER, "BHF_COMM");
    outProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_TEXT);
    outProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, 
    com.sap.xi.edi.supplier.ClientPasswordCallback.class.getName());

    WSS4JOutInterceptor wssOut = new WSS4JOutInterceptor(outProps);
    cxfEndpoint.getOutInterceptors().add(wssOut);
    portl.orderRequestIn(_orderRequestIn_orderRequest);
        }
        

        System.exit(0);
    }

}
